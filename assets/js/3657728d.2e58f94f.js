"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[775],{4849:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var r=n(4848),t=n(8453);const s={},a="3. Objetos Geometricos",i={id:"DynamoBasics/GeometriaDynamo/03ObjetosGeometricos",title:"3. Objetos Geometricos",description:"Como pudimos observar en las secciones anteriores, la geometria de Dynamo se crea usando losnodos.",source:"@site/docs/01-DynamoBasics/04-GeometriaDynamo/03ObjetosGeometricos.mdx",sourceDirName:"01-DynamoBasics/04-GeometriaDynamo",slug:"/DynamoBasics/GeometriaDynamo/03ObjetosGeometricos",permalink:"/dynamoPythonGuia-OBG/docs/DynamoBasics/GeometriaDynamo/03ObjetosGeometricos",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-DynamoBasics/04-GeometriaDynamo/03ObjetosGeometricos.mdx",tags:[],version:"current",frontMatter:{},sidebar:"guiaDynamoBasic",previous:{title:"2. Geometrias Abstractas",permalink:"/dynamoPythonGuia-OBG/docs/DynamoBasics/GeometriaDynamo/02GeometriaAbstracta"},next:{title:"4. Operaciones b\xe1sicas con geometrias",permalink:"/dynamoPythonGuia-OBG/docs/DynamoBasics/GeometriaDynamo/04OperacionesGeometricas"}},c={},m=[];function u(e){const o={h1:"h1",mermaid:"mermaid",p:"p",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.h1,{id:"3-objetos-geometricos",children:"3. Objetos Geometricos"}),"\n",(0,r.jsx)(o.p,{children:"Como pudimos observar en las secciones anteriores, la geometria de Dynamo se crea usando losnodos.\r\nEl resultado que devuelve un nodo de geometria es un objeto el cual ya sabemos reconocer, perotambein es importantes\r\ntener en cuenta que existe un diagrma de clases el cual debemos reconocer para poder usar adecuadamente los nodos\r\ngeometricos."}),"\n",(0,r.jsx)(o.mermaid,{value:"classDiagram\r\n    DesignScriptEntity <-- Geometry\r\n    DesignScriptEntity <-- BoundingBox\r\n    DesignScriptEntity <-- Vector\r\n    DesignScriptEntity <-- CoordinateSystem\r\n    DesignScriptEntity <-- Edge\r\n    DesignScriptEntity <-- Face\r\n    Geometry <-- Curve\r\n    Geometry <-- Point\r\n    Geometry <-- Plane\r\n    Geometry <-- Topology\r\n    Curve <-- Line\r\n    Curve <-- Arc\r\n    Curve <-- Circle\r\n    Curve <-- Ellipse\r\n    Curve <-- PolyCurve\r\n    PolyCurve <-- Polygon\r\n    Polygon <-- Rectangle\r\n    Topology <-- Solid\r\n    Topology <-- Surface\r\n    Surface <-- PolySurface\r\n    Surface <-- NurbsSurface\r\n    Solid <-- Cone\r\n        Cone <-- Cylinder\r\n    Solid <-- Cuboid\r\n    Solid <-- Sphere"})]})}function d(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>i});var r=n(6540);const t={},s=r.createContext(t);function a(e){const o=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);