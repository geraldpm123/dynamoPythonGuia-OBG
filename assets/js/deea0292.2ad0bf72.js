"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9515],{913:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>p,default:()=>v,frontMatter:()=>u,metadata:()=>f,toc:()=>S});var o=r(4848),t=r(8453),i=r(2364);const c='# Importaci\xf3n de bibliotecas\r\nimport clr\r\n\r\nclr.AddReference("RevitAPIUI")\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\n# Import Document Manager\r\nclr.AddReference("RevitServices")\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Obteniendo Ids de elementos seleccionados\r\nids_selecciones = uidoc.Selection.GetElementIds()\r\n\r\n"""\r\nelementosSel = []\r\nfor id in ids_selecciones:\r\n  elementosSel.append(doc.GetElement(id))\r\n"""\r\n\r\nelementosSel = [doc.GetElement(id) for id in ids_selecciones]\r\n\r\nOUT = elementosSel',s='# Importaci\xf3n de bibliotecas\r\nimport clr\r\n\r\nclr.AddReference("RevitAPIUI")\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\n# Import Document Manager\r\nclr.AddReference("RevitServices")\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# M\xe9todo para seleccionar varios elementos dentro del modelo\r\nref_pickObjects = uidoc.Selection.PickObjects(ObjectType.Element, "Seleccione elementos en el modelo")\r\n\r\n# Tendremos una lista de Reference para los objetos seleccionados\r\n"""\r\npickObjects = []\r\nfor reff in ref_pickObjects:\r\n  pickObjects.append(doc.GetElement(reff))\r\n"""\r\n\r\npickObjects = [doc.GetElement(reff) for reff in ref_pickObjects]\r\n\r\nOUT = pickObjects',l='# Importaci\xf3n de bibliotecas\r\nimport clr\r\n\r\nclr.AddReference("RevitAPIUI")\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\n# Import Document Manager\r\nclr.AddReference("RevitServices")\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n# Obteniendo la selecci\xf3n de elementos dentro de un rect\xe1ngulo de selecci\xf3n\r\nsel_elems = uidoc.Selection.PickElementsByRectangle("Seleccione un rectangulo que encierre los elementos")\r\n\r\nOUT = sel_elems',a='# Importaci\xf3n de bibliotecas\r\nimport clr\r\n\r\nclr.AddReference("RevitAPI")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference("RevitAPIUI")\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\n# Import Document Manager\r\nclr.AddReference("RevitServices")\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Definimos la clase para el filtro\r\nclass filtroSeleccionMuros(ISelectionFilter):\r\n  def AllowElement(self, element):\r\n    if element.Category.BuiltInCategory == BuiltInCategory.OST_Walls:\r\n      return True\r\n\r\n# Instanciamos un objeto de la clase "filtroSeleccionMuros"\r\nfiltro = filtroSeleccionMuros()\r\n\r\n# M\xe9todo para seleccionar varios elementos dentro del modelo\r\nref_pickWalls= uidoc.Selection.PickObjects(ObjectType.Element, filtro, "Seleccione muros en el modelo")\r\n\r\n# Tendremos una lista de Reference para los objetos seleccionados\r\npickWalls = [doc.GetElement(reff) for reff in ref_pickWalls]\r\n\r\nOUT = pickWalls',d="import clr\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\nflag = True\r\nselectIds = []\r\n\r\nwhile flag:\r\n    try:\r\n        ref = uidoc.Selection.PickObject(ObjectType.Element, 'Seleccione elementos en orden, presione ESC para parar la selecci\xf3n.')\r\n        e_id = ref.ElementId\r\n        if e_id not in selectIds:\r\n            selectIds.append(e_id)\r\n    except:\r\n        flag = False\r\n        break\r\n\r\nelemenSelect = [doc.GetElement(id) for id in selectIds]\r\n\r\nOUT = elemenSelect",m="\"\"\"\r\nEjemplo: Seleccion ordenada de elementos\r\nhttps://forum.dynamobim.com/t/node-for-picking-elements-in-order-with-revit-ui/66508/11\r\n\"\"\"\r\n\r\nimport clr\r\nimport sys\r\nimport System\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nimport Autodesk.Revit.DB as DB\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\nfrom System.Collections.Generic import List\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\nuidoc = uiapp.ActiveUIDocument\r\n\r\n#Obtener el patron de relleno uniforme\r\npats = FilteredElementCollector(doc).OfClass(FillPatternElement).ToElements()\r\nfor pat in pats:\r\n\tif (pat.GetFillPattern().IsSolidFill):\r\n\t\tpatSolid = pat\r\n\t\tbreak\r\n\r\ndef overridecolor(elementId, reset = False):\r\n\tt = Transaction(doc, \"Selection\")\r\n\tt.Start()\r\n\tview = doc.ActiveView\r\n\tcolor_rgb = DB.Color(30,144,255)\r\n\tgSettings = OverrideGraphicSettings()\r\n\tif not reset: \r\n\t\tgSettings.SetSurfaceForegroundPatternColor(color_rgb) \r\n\t\tgSettings.SetProjectionLineColor(color_rgb)\r\n\t\tgSettings.SetCutLineColor(color_rgb)\r\n\t\tgSettings.SetCutForegroundPatternColor(color_rgb)\r\n\t\tgSettings.SetProjectionLineWeight(8)\r\n\t\tgSettings.SetSurfaceForegroundPatternId(patSolid.Id)\r\n\tview.SetElementOverrides(elementId, gSettings)\r\n\tdoc.Regenerate()\r\n\tuidoc.RefreshActiveView()\r\n\tt.Commit()\r\n\tt.Dispose()\r\n\t\t\t\r\n\t\t\r\nflag = True\r\nselectId = []\r\nTransactionManager.Instance.ForceCloseTransaction()\r\nTaskDialog.Show('Selection', 'Pick elements in the desired order (re-select to Remove), hit ESC to stop picking.')\r\ntg = TransactionGroup(doc, \"Selection\")\r\ntg.Start()\r\nwhile flag:\r\n\ttry:\r\n\t\tref = uidoc.Selection.PickObject(ObjectType.Element, 'Pick elements in the desired order (re-select to Remove), hit ESC to stop picking.')\r\n\t\te_id = ref.ElementId\r\n\t\tif e_id not in selectId:\r\n\t\t\toverridecolor(e_id)\r\n\t\t\tselectId.append(e_id)\r\n\t\telse:\r\n\t\t\toverridecolor(e_id, True)\r\n\t\t\tselectId.pop(selectId.index(e_id))\r\n\t\t\t\r\n\texcept Exception as ex:\r\n\t\tflag = False\r\n\t\tbreak\t\t\r\ntg.RollBack()\r\nelemenSelect = [doc.GetElement(xId) for xId in selectId]\r\n\r\nOUT = elemenSelect",u={sidebar_position:2},p="1. Selecci\xf3n de elementos de Revit",f={id:"DynamoPython/TemasAdicionales/01Selection",title:"1. Selecci\xf3n de elementos de Revit",description:"La mayoria de script de Dynamo requiere de una tarea previa de seleccion de elementos, esto ayuda al usuario a indicar que eleemntos seran usadois en un determiuado scirpt, para ello tenemos algunos nodos basico en Dyano, como por ejemplo el nodo Select Model Element, pero algunas veces se requeire una seleccion mas especifica y mas personalizada, en este capitulo aboradamos la clase Selection perteneciente al namespace Autodesk.Revit.UI.Selection.",source:"@site/docs/02-DynamoPython/04-TemasAdicionales/01Selection.mdx",sourceDirName:"02-DynamoPython/04-TemasAdicionales",slug:"/DynamoPython/TemasAdicionales/01Selection",permalink:"/dynamoPythonGuia-OBG/docs/DynamoPython/TemasAdicionales/01Selection",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-DynamoPython/04-TemasAdicionales/01Selection.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guiaDynamoAvanzado",previous:{title:"1. XAML con IronPython",permalink:"/dynamoPythonGuia-OBG/docs/DynamoPython/TemasAdicionales/01FormulariosXAML"},next:{title:"2. Filtrando Elementos",permalink:"/dynamoPythonGuia-OBG/docs/DynamoPython/TemasAdicionales/02FilterElementCollector"}},g={},S=[{value:"1.1. Ejemplos de aplicacion para la clase Selection",id:"11-ejemplos-de-aplicacion-para-la-clase-selection",level:2},{value:"1.2. Selection Filter",id:"12-selection-filter",level:2},{value:"1.3. Seleccion Ordenada de Elementos",id:"13-seleccion-ordenada-de-elementos",level:2},{value:"1.4. Seleccion desde Vinculos",id:"14-seleccion-desde-vinculos",level:2},{value:"1.5. Ejercicios",id:"15-ejercicios",level:2}];function j(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"1-selecci\xf3n-de-elementos-de-revit",children:"1. Selecci\xf3n de elementos de Revit"}),"\n",(0,o.jsxs)(n.p,{children:["La mayoria de script de Dynamo requiere de una tarea previa de seleccion de elementos, esto ayuda al usuario a indicar que eleemntos seran usadois en un determiuado scirpt, para ello tenemos algunos nodos basico en Dyano, como por ejemplo el nodo ",(0,o.jsx)(n.code,{children:"Select Model Element"}),", pero algunas veces se requeire una seleccion mas especifica y mas personalizada, en este capitulo aboradamos la clase ",(0,o.jsx)(n.code,{children:"Selection"})," perteneciente al namespace ",(0,o.jsx)(n.code,{children:"Autodesk.Revit.UI.Selection"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Para acceder a los metdoos que ofrece esta clase, necsitamos de una instancia de la clase ",(0,o.jsx)(n.code,{children:"Selection"}),", esta clase no ofrece un constructor ni un metodo estatico para crerla, sino que este objeto ya existe en un proyecto, por l oque solo es necesario recuperarlo.\r\nPara recuperar este objeto lo haremos a traves del objeto uidoc, especificamente en su propiedad uidoc.Selection."]}),"\n",(0,o.jsx)(n.p,{children:"A continuacion se muestra el codigo para obetenr este objeto Selection:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:'# Importaci\xf3n de bibliotecas\r\nimport clr\r\n\r\nclr.AddReference("RevitAPIUI")\r\nfrom Autodesk.Revit.UI.Selection import *\r\n\r\n# Import Document Manager\r\nclr.AddReference("RevitServices")\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\n# Obteniendo el objeto selection\r\nselection = uidoc.Selection\n'})}),"\n",(0,o.jsx)(n.h2,{id:"11-ejemplos-de-aplicacion-para-la-clase-selection",children:"1.1. Ejemplos de aplicacion para la clase Selection"}),"\n",(0,o.jsx)(n.p,{children:"A continuacion se muestran algunos ejemplos aplicativos para la seleccion comunes utilizando la clase Selection."}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.strong,{children:"Ejemplo: Obtener seleccion actual"})}),(0,o.jsx)(n.p,{children:"En este ejemplo se muestra como obtener los elementos acutalmente seleccionados en el entorno de Revit"}),(0,o.jsx)(i.A,{language:"py",children:c})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.strong,{children:"Ejemplo: Pick Objects"})}),(0,o.jsx)(n.p,{children:"En este ejemplo se muestra como seleccionar uno a uno los elementos dentro de un proyecto de Revit para obtenerlos en una lista."}),(0,o.jsx)(i.A,{language:"py",children:s})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.strong,{children:"Ejemplo: Seleccionar Elementos por Rectangulo"})}),(0,o.jsx)(n.p,{children:"En este ejemplo se muestra como obtener los elementos encerrados en un rectangulo de seleccion."}),(0,o.jsx)(i.A,{language:"py",children:l})]}),"\n",(0,o.jsx)(n.h2,{id:"12-selection-filter",children:"1.2. Selection Filter"}),"\n",(0,o.jsxs)(n.p,{children:["Muchas veces cuando requieres que el usuario seleccione elementos u objetos en tiempo real como vimos en los ejemplos anteriores, es necesario definri un filtro de seleccion\r\nque no permita la seleccion de cualquier elemento, sino que permtia sol oal selecion de elementos que cumplan uan regla.\r\nEn esos casos se puede usar la interfaz ",(0,o.jsx)(n.code,{children:"ISelectionFilter"}),", una interfaz en terminos simples es una plantilla de Clase (para que tu puedas crear tu propia clase). Las interfaces pro lo general\r\nte obligan a imoplementar uno o varios metodos con un nombre especifico. A continuacion mostramos un ejemplo basico:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",children:"class filtroSeleccionMuros(ISelectionFilter):\r\n  def AllowElement(self, element):\r\n    if type(element) == Wall:\r\n      return True\n"})}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.strong,{children:"Ejemplo: Seleccionar solo Muros"})}),(0,o.jsx)(n.p,{children:"En este ejemplo se muestra como seleccionar elementos pertenecientes a la categoria muros."}),(0,o.jsx)(i.A,{language:"py",children:a})]}),"\n",(0,o.jsx)(n.h2,{id:"13-seleccion-ordenada-de-elementos",children:"1.3. Seleccion Ordenada de Elementos"}),"\n",(0,o.jsx)(n.p,{children:"Revit no tiene una herramienta predefinida para la seleccion de elementos de forma ordenada, es decir que nos devuelva una lista de elementos ordenadas conforme el uduario losselecciono.\r\nPero podemos programar con aydua de Python la logica parallenar una lista conforme el usuario va seleccionando los elementos.\r\nA continuacion se muestra un ejemplo basico de esto:"}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.strong,{children:"Ejemplo: Seleccion Ordenada Basica"})}),(0,o.jsx)(n.p,{children:"En este ejemplo se muestra como seleccionar elementos de forma ordenada, de tal forma que se va llenando a una lista, hasta que el usuario haga algo diferentre a seleccion (ESC)."}),(0,o.jsx)(i.A,{language:"py",children:d})]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:(0,o.jsx)(n.strong,{children:"Ejemplo: Seleccion Ordenada Coloreando Elementos"})}),(0,o.jsx)(n.p,{children:"En este ejemplo se muestra como seleccionar elementos pertenecientes a la categoria muros."}),(0,o.jsx)(i.A,{language:"py",children:m})]}),"\n",(0,o.jsx)(n.h2,{id:"14-seleccion-desde-vinculos",children:"1.4. Seleccion desde Vinculos"}),"\n",(0,o.jsx)(n.h2,{id:"15-ejercicios",children:"1.5. Ejercicios"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'Cree un Python Script que permita la seleccion de elementos a partir de un rectangulo de seleccion, de elementos cuyo valor de parametro Comentarios empiece con la letra "A".'}),"\n",(0,o.jsxs)(n.li,{children:["Cree un Python Script que permita la seleccion de elementos por pickObjeto, de elementos cuyo nombre de tipo contenga el string ",(0,o.jsx)(n.code,{children:'"Con"'}),"."]}),"\n",(0,o.jsx)(n.li,{children:"Cree un Python Script que establezca la seleccion de elementos, si es que tiene algun tipo de Warning."}),"\n",(0,o.jsxs)(n.li,{children:["Cree un Python Script que permita la seleccion de puertas que hayan sido Reflejadas ",(0,o.jsx)(n.strong,{children:"Mirrored"}),"."]}),"\n"]})]})}function v(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(j,{...e})}):j(e)}}}]);