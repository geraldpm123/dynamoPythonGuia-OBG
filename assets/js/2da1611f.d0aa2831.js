"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5269],{5689:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=o(4848),t=o(8453);o(2364);const s={sidebar_position:8},i="8. Geometry Conversion",a={id:"DynamoPython/RevitAPI/08GeometryConversion",title:"8. Geometry Conversion",description:"La conversi\xf3n de geometr\xedas entre Revit y Dynamo (ProtoGeometry) es una tarea com\xfan",source:"@site/docs/02-DynamoPython/03-RevitAPI/08GeometryConversion.mdx",sourceDirName:"02-DynamoPython/03-RevitAPI",slug:"/DynamoPython/RevitAPI/08GeometryConversion",permalink:"/dynamoPythonGuia-OBG/docs/DynamoPython/RevitAPI/08GeometryConversion",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02-DynamoPython/03-RevitAPI/08GeometryConversion.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"guiaDynamoAvanzado",previous:{title:"7. Interoperabilidad Excel con Python",permalink:"/dynamoPythonGuia-OBG/docs/DynamoPython/RevitAPI/07InteroperabilidadExcel"},next:{title:"9. Ejemplos Intermedio Avanzados",permalink:"/dynamoPythonGuia-OBG/docs/DynamoPython/RevitAPI/09EjemplosIntermedio"}},d={},l=[{value:"8.1. GeometryConversion Namespace",id:"81-geometryconversion-namespace",level:2},{value:"8.2. Convertir Geometr\xeda de Revit a ProtoGeometry",id:"82-convertir-geometr\xeda-de-revit-a-protogeometry",level:2},{value:"8.2. Convertir Geometr\xeda de ProtoGeometry a Revit",id:"82-convertir-geometr\xeda-de-protogeometry-a-revit",level:2},{value:"8.3. Ejemplos Practicos",id:"83-ejemplos-practicos",level:2}];function m(e){const r={br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:o}=r;return o||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"8-geometry-conversion",children:"8. Geometry Conversion"}),"\n",(0,n.jsx)(r.p,{children:"La conversi\xf3n de geometr\xedas entre Revit y Dynamo (ProtoGeometry) es una tarea com\xfan\r\ncuando se trabaja con Dynamo y Revit API. Dynamo es una plataforma de modelado visual\r\npara Revit y otros productos de Autodesk, y utiliza su propio sistema de geometr\xeda\r\nllamado ProtoGeometry. Revit, por otro lado, utiliza su propia API de geometr\xeda."}),"\n",(0,n.jsx)(r.h2,{id:"81-geometryconversion-namespace",children:"8.1. GeometryConversion Namespace"}),"\n",(0,n.jsx)(r.p,{children:"En Dynamo, el GeometryConversion namespace proporciona m\xe9todos y clases para\r\nconvertir entre las geometr\xedas de ProtoGeometry y las geometr\xedas nativas de Revit."}),"\n",(0,n.jsx)(r.p,{children:"Primero, necesitamos importar los m\xf3dulos necesarios."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"import clr\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\n"})}),"\n",(0,n.jsx)(r.h2,{id:"82-convertir-geometr\xeda-de-revit-a-protogeometry",children:"8.2. Convertir Geometr\xeda de Revit a ProtoGeometry"}),"\n",(0,n.jsxs)(r.p,{children:["Para convertir una geometr\xeda de Revit a ProtoGeometry, se puede usar el m\xe9todo ",(0,n.jsx)(r.code,{children:"ToProtoType"}),"."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Conversion de Elementos"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"Element.ToDSType(bool); # True si es un elemento generado por Revit\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Conversion de Geometrias"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"XYZ.ToPoint() > Point\r\nXYZ.ToVector() > Vector\r\nPoint.ToProtoType() > Point\r\nList<XYZ>.ToPoints() > List<Point>\r\nUV.ToProtoType() > UV\r\nCurve.ToProtoType() > Curve\r\nCurveArray.ToProtoType() > PolyCurve\r\nPolyLine.ToProtoType() > PolyCurve\r\nPlane.ToPlane() > Plane\r\nSolid.ToProtoType() > Solid\r\nMesh.ToProtoType() > Mesh\r\nIEnumerable<Mesh>.ToProtoType() > Mesh[]\r\nFace.ToProtoType() > IEnumerable<Surface>\r\nTransform.ToCoordinateSystem() > CoordinateSystem\r\nBoundingBoxXYZ.ToProtoType() > BoundingBox\n"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"82-convertir-geometr\xeda-de-protogeometry-a-revit",children:"8.2. Convertir Geometr\xeda de ProtoGeometry a Revit"}),"\n",(0,n.jsxs)(r.p,{children:["Para convertir una geometr\xeda de ProtoGeometry a la geometr\xeda nativa de Revit, puedes usar el m\xe9todo ",(0,n.jsx)(r.code,{children:"ToRevitType"}),":"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Conversion de Elementos"}),(0,n.jsx)(r.br,{}),"\n","Nosotros usamos el metodo ",(0,n.jsx)(r.code,{children:"UnwrapElement()"})," pero tambien puede usarse la propiedad ",(0,n.jsx)(r.code,{children:"InternalElement"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"EElement.InternalElement\n"})}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"Conversion de Geometrias"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"Point.ToRevitType() > XYZ\r\nVector.ToRevitType() > XYZ\r\nPlane.ToPlane() > Plane\r\nList<Point>.ToXyzs() > List<XYZ>\r\nCurve.ToRevitType() > Curve\r\nPolyCurve.ToRevitType() > CurveLoop\r\nSurface.ToRevitType() > IList<GeometryObject>\r\nSolid.ToRevitType() > IList<GeometryObject>\r\nMesh.ToRevitType() > IList<GeometryObject>\r\nCoordinateSystem.ToTransform() > Transform\r\nCoordinateSystem.ToRevitBoundingBox() > BoundingBoxXYZ\r\nBoundingBox.ToRevitType() > BoundingBoxXYZ\n"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"83-ejemplos-practicos",children:"8.3. Ejemplos Practicos"}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:(0,n.jsx)(r.strong,{children:"Ejemplo: Obteniendo Solido Dynamo"})}),(0,n.jsx)(r.p,{children:"En este ejemplo se muestra como obtener el solido de Dynamo de un muro"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-py",children:"# Inputs\r\nmuro = IN[0] # No lo desempaquetamos\r\n\r\nsolidos = muro.Solids\r\n\r\nOUT = solidos\n"})})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:(0,n.jsx)(r.strong,{children:"Ejemplo: Obteniendo Solido Revit"})}),(0,n.jsx)(r.p,{children:"En este ejemplo se muestra como obtener el solido nativo de Revit de un muro"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-py",children:"# Inputs\r\nmuro = UnwrapElement(IN[0])\r\n\r\ngeoOptions = Options()\r\nsolido = muro.get_Geometry(geoOptions)\r\n\r\nOUT = solido\n"})})]}),"\n",(0,n.jsx)(r.p,{children:"Luego podemos convertir el solido nativo de Revit a un solido de Dynamo:"}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:(0,n.jsx)(r.strong,{children:"Ejemplo: Convirtiendo Solido Revit a ProtoGeometry"})}),(0,n.jsx)(r.p,{children:"En este ejemplo se muestra como convertir geometrias"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-py",children:"# Inputs\r\nsolido = IN[0]\r\n\r\n# resaltado--next-line\r\nOUT = solido.ToProtoType()\n"})})]}),"\n",(0,n.jsx)(r.p,{children:"Ahora mostramos un ejemplo para crear un muro pero usando geometria de Dynamo, esto dentro de un PythonScript."}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:(0,n.jsx)(r.strong,{children:"Ejemplo: Creando un muro a partir de una Curve ProtoGeometry"})}),(0,n.jsx)(r.p,{children:"En este ejemplo se muestra como crear un muro usando Revit API a partir de una Curve ProtoGeometry"}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-py",children:'import clr\r\n\r\n#Import Revit API\r\nclr.AddReference(\'RevitAPI\')\r\nfrom Autodesk.Revit.DB import *\r\n\r\n#import Revit Nodes and extensions\r\nclr.AddReference("RevitNodes")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\n#import Document Manager and TransactionManager\r\nclr.AddReference("RevitServices")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\n#Principales variables que tal vez usemos\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\n# Convertimos la geometria\r\n# resaltado--next-line\r\ncurva = IN[0].ToRevitType()\r\nlevel = UnwrapElement(IN[1])\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n# Creamos un muro\r\nmuro = Wall.Create(doc, curva, level.Id, True)\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\nOUT = 0\n'})})]}),"\n",(0,n.jsx)(r.p,{children:"Desarrollar un python script para Crear una abertura de muro para que pasen tuberias."})]})}function c(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}}}]);